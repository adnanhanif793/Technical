SELECT * FROM Customers;




    SELECT - extracts data from a database
    UPDATE - updates data in a database
    DELETE - deletes data from a database
    INSERT INTO - inserts new data into a database
    CREATE DATABASE - creates a new database
    ALTER DATABASE - modifies a database
    CREATE TABLE - creates a new table
    ALTER TABLE - modifies a table
    DROP TABLE - deletes a table
    CREATE INDEX - creates an index (search key)
    DROP INDEX - deletes an index


SELECT CustomerName, City FROM Customers;


SELECT Country FROM Customers;  		(Duplicate Countries Also)
SELECT DISTINCT Country FROM Customers;		(No duplicates)
SELECT COUNT(DISTINCT Country) FROM Customers;

SELECT * FROM Customers
WHERE Country='Mexico'

SELECT * FROM Customers
WHERE CustomerID=1; 


SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin'

SELECT * FROM Customers
WHERE Country='Germany' OR Country='Spain'

SELECT * FROM Customers
WHERE NOT Country='Germany'

SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='München')

SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA'


SELECT * FROM Customers
ORDER BY Country

SELECT * FROM Customers
ORDER BY Country DESC

SELECT * FROM Customers
ORDER BY Country, CustomerName

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC


INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway')

Insert Data Only in Specified Columns

INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway')

A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL


UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1


UPDATE Customers
SET ContactName='Juan'
WHERE Country='Mexico

Be careful when updating records. If you omit the WHERE clause, ALL records will be updated



DELETE FROM table_name      (Delete all records)


DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste'


SELECT * FROM Customers
WHERE ROWNUM <= 3

SELECT * FROM Customers
WHERE Country='Germany' AND ROWNUM <= 3

SELECT MIN(Price) AS SmallestPrice
FROM Products

SELECT MAX(Price) AS LargestPrice
FROM Products

SELECT COUNT(ProductID)
FROM Products

SELECT AVG(Price)
FROM Products

SELECT SUM(Quantity)
FROM OrderDetails

=================================================================================

%	Represents zero or more characters	bl% finds bl, black, blue, and blob
_	Represents a single character	h_t finds hot, hat, and hit

[]	Represents any single character within the brackets
	h[oa]t finds hot and 	hat, but not hit
^	Represents any character not in the brackets	h[^oa]t finds hit, but not hot 	and hat
-	Represents a range of characters	c[a-b]t finds cat and cbt


WHERE CustomerName LIKE 'a%'	Finds any values that starts with "a"
WHERE CustomerName LIKE '%a'	Finds any values that ends with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%'	Finds any values that starts with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that starts with "a" and ends with "o"




SELECT * FROM Customers
WHERE CustomerName LIKE 'a%'     (name starts with a)

SELECT * FROM Customers
WHERE CustomerName LIKE '%a'     (name ends with a)

SELECT * FROM Customers
WHERE CustomerName LIKE '%or%'	  (Name that have "or" in any position)


SELECT * FROM Customers
WHERE CustomerName LIKE '_r%'	  (Name that have "r" in the second position)

SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%	  (Name that starts with "a" and are at least 3 characters in length)


SELECT * FROM Customers
WHERE ContactName LIKE 'a%o'	   (Name that starts with "a" and ends with "o")


SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%	   (Name that does NOT start with "a")



SELECT * FROM Customers
WHERE City LIKE '_ondon'	    (City starting with any character, followed by "ondon")



SELECT * FROM Customers		    
WHERE City LIKE 'L_n_on'	    (City starting with "L", followed by any 						     character, followed by "n",followed by any 				     character, followed by "on")



SELECT * FROM Customers
WHERE City LIKE '[bsp]%';	     selects all customers with a City starting with 				     "b", "s", or "p"



SELECT * FROM Customers
WHERE City LIKE '[a-c]%';	     selects all customers with a City starting with 				     "a", "b", or "c"



SELECT * FROM Customers
WHERE City LIKE '[!bsp]%'	     select all customers with a City NOT starting 				     with "b", "s", or "p"

or 
SELECT * FROM Customers
WHERE City NOT LIKE '[bsp]%'



SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK')	 selects all customers that are 						 located in "Germany", "France" or 						 "UK"



SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');  selects all customers that are NOT                                                     located in "Germany", "France" or 						  	   "UK"



SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers)	selects all customers that are 							from the same countries as the 							suppliers


SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20				selects all products with a 							price BETWEEN 10 and 20


SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20



SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND NOT CategoryID IN (1,2,3)				selects all products with a 							price BETWEEN 10 and 20. In 							addition; do not show products 							with a CategoryID of 1,2, or 3



SELECT * FROM Products
WHERE ProductName BETWEEN "Carnarvon Tigers" AND "Chef Anton's Cajun Seasoning"
ORDER BY ProductName;


SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName



SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31'



SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers

SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers								It requires 											double quotation marks 									or square brackets if 									the alias name contains 									spaces



SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers										creates an alias 										named "Address" that 										combine four columns 										(Address, PostalCode, City 											and Country)


SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID		 (Alias)

=========================================================================================================

JOINS

A JOIN clause is used to combine rows from two or more tables, based on a related column between them

INNER JOIN

SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID		selects records that have 											matching values in both tables



The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the "Orders" table that do not have matches in "Customers", these orders will not be shown


SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID)



SQL LEFT JOIN
The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match








Scalar Funtion

Create FUNCTION ReturnArea(@length int,@width int)
RETURNS int
AS
BEGIN
     RETURN @length * @width
END
GO
---------------------------------------------------------------------------

Alter FUNCTION ReturnArea(@length int,@width int)
RETURNS int
AS
BEGIN
     RETURN @length * @width+5
END
GO
---------------------------------------------------------------------------

DROP FUNCTION ReturnArea

----------------------------------------------------------------------------

Select dbo.ReturnArea(6,5)

----------------------------------------------------------------------------
Table Function

create FUNCTION ConcatNameAddress (@Name varchar(max )

RETURNS Table

AS

BEGIN

RETURN @Name + ' ' + @Address

END

GO
------------------------------------------------------------------

Select dbo.ConcatNameAddress(Name, [Address]) from Person                  //[] is used when name of a varaible is reserved word


====================================================================================================

View

Create View vuGetTeachers AS
Select * from Person where Type =2

------------------------------------------------------------
Select * from vuGetTeachers

================================================================================================

Stored Procedure

Alter Proc RandomGoodness ( @name varchar(max)) AS

BEGIN

Declare @TotalSpent float

Declare @ID int

Select @TotalSpent= Price, @ID = ID from Person where Name = @name

Delete From Person where ID = @ID

END

--RandomGoodness 'bob'

SElect * from Person where ID = 8



Notice this procedure pulls from the table person


------------------


N maximum salary:

SELECT MIN(EmpSalary)
FROM Salary
WHERE EmpSalary IN(SELECT TOP N EmpSalary FROM Salary ORDER BY EmpSalary DESC) 
for Ex: 3 maximum salary:

SELECT MIN(EmpSalary)
FROM Salary
WHERE EmpSalary IN(SELECT TOP 3 EmpSalary FROM Salary ORDER BY EmpSalary DESC) 
N minimum salary:

SELECT MAX(EmpSalary)
FROM Salary
WHERE EmpSalary IN(SELECT TOP N EmpSalary FROM Salary ORDER BY EmpSalary ASC)
for Ex: 3 minimum salary:

SELECT MAX(EmpSalary)
FROM Salary
WHERE EmpSalary IN(SELECT TOP 3 EmpSalary FROM Salary ORDER BY EmpSalary ASC)