pwd   - present working directory
echo *  - all folder in the current directory
echo "Hello" - will print hello

apt-get install tree   - to install tree in linux system
sudo apt-get -y install konsole

tree - to display tree structure

ls- to display the files and folder in current directory

ls -l  - to display detailed list


vi adn.text -To create a file (vim can also be used)

echo $SHELL  - to check the type of shell (it can be bash etc)


chmod 777 test.sh  - To change the permission of the file

hostname - to display the hostname

man hostname - give the manual for hostname

hostname -I   - for getting the ip of the system (ifconfig can also be used)

fdisk /dev/sda -l  - for cheking the disk space


parted and then print  --for checking the partition

---------------------------------------------------------------------------------------------------------

ls -l  - For detailed list of all folders and files

drwxr-xr-x   - d is for directory and for files - will be there.

first three permission for the user, next 3 for the group and next 3 for other users.

ls -a or ls -la  - for listing the hidden files


drwxr-xr-x  3  root root

3 is for the for the number of directories contained by it. By default . and ..  hidden folders will be present.
and 1 will be for files
first root is the user and second root is the group.

--------------------------------------------------------------------------------------------------
by default when a directory is created there is space allocation of 4096

inodes- All files are stored in a particular physical blocks which may not be ordered as some of data might be deleted, so a way to arrange is it to prepare alist of inodes

ls -ia and ls -lia    for inodes

inode are data structure from where to fetch the data

---------------------------------------------------------------------------------------------------------------
ls -lrt   for listing files on basis of time in ascending order
ls -lt    for listing files on basis of time in descending order 
ls -l     for listing files on basis of name in ASCII order 
ls -lrS   for listing files on basis of size in ascending order
ls -lS    for listing files on basis of size in descending order

ls -lh    for size of file in terms of KB, MB

man ls    for manual of ls

===========================================================================


cat > abc.txt  (for creating the file and entering in the file, ctrl+D for ending the input)

vi abc1.txt

cat abc.txt abc1.txt > new_file.txt  (copies the content of bot files into newfile.txt)


cat new_file.txt |more(or less)       (| piping output from one command to another)
(more means display one screen shot at time, spacebar to diplay next page)


rm abc.txt (to remove the file)

rm -fr directoryName (for removing a directory, f is force and r is recursive(deleting all subfolder and files))

mkdir directoryName  (for making a directory)

rmdir directoryName  (for removing a directory but the directory should be empty )


history or !h  - to check the history of commands

==========================================================================================

cp test.spp test1.cpp                copies file
   (Source file) (Dest files)

cp -rf abc abc_dest     (for copying all files and foders)(r is for recursive and f is for forced overwriting if the  folder already exists)



mv test.cpp butter.cpp   (for renaming the file and folders)

==========================================================================================

cal  (will show the calendar of present month)

cal 2017 (will show calendar of all months of 2017)

cal 03 2015 (3rd month of 2015)

date  (for displaying today's date and time)

date -u   (UTC time, time in London)

date +"%T"  (only time)

date + %B   (month in leters)

date + %d   (day of the month)

date +%D    (mm/dd/yy format)

date +%F    (yyyy-mm-dd format)

man date    ( for manual of date)

date +"%m-%d-%Y"    (mm-dd-yyyy)
(m= 2 digit for month,d= 2 digit for day,Y=4 digit for year)


date +"%m%d%H%M%Y.%S"              
(m= 2 digit for month,d= 2 digit for day,H=2 digit hour,M=2 digit minute, Y= 4 digit Year, S= 2 digit Sec)

date can be set by using super user privileges

date 080215362017.37    (sets the date as Wed Aug 2 15:36:37 PDT 2017)


time test.sh           (time taken to run the script)

===========================================================================================

sudo apt -get -y install vim

vi myfile.txt

2 modes:
1- command mode  (escape to go into command mode)
2- Insert mode  (i to go into insert mode)

(ESC might be required before all these commands)
dd    to delete a line in command mode
o     to get line below a line
dw    to delete a particuar word
3dw   to delete 3 words
x     to delete a letter
yy    to copy a line
p     to paste the line
5dd   to delete 5 lines
u     to undo
100p  to paste line 100 times

Esc: set nonu        (to remove the line numbers)
Esc: set nu          (to display the line number)


Esc/packageS          (search for package in file[case insensitive])

Esc: set noic        (turn on case sensitive)

Esc/packageS         (Pattern not found) 

Esc: set ic          (turn on case insensitive)


Esc then SHIFT+R D     (replace the selected character with given character)

Esc SHIFT+A            (to go to the end of the line)
Esc SHIFT |	       (to go to the starting of the line)

SHIFT+j		       (move one line from bottom to top)

Esc:55		       (move to line 55)


SHIFT+g		       (move to the end of the file)

Esc:1                   (move to beginning of the file)


Esc:q!                 (to discard the changes in file and quit,if ! is not used then it will give prompt )



:wq!                   (save the changes and quit edito)

:w!		        (save the changes without quitting)

:e  or f               (to see the file name)


:e test2.txt           (to open another file test2)


:bn			(for opening next file)



:sp  and vsp 		(for splitting screen horizontally and vertically)

CTRL+ww 		(to toggle between splitted windows)


==============================================================================================

rwx

r=4
w=2
x=1

rwxrwxrwx  =777

r--r--r--  =444

r-x------  =500


touch file1.txt    (to create a blank file named file1.txt)



chmod 777 file1.txt   (give rwx permission to all)


chmod o+wx file1.txt   (give wx permission to others)


chmod o-wx file1.txt   (remove wx permission from others)

(u can be used for users and g can be used for groups)


chmod g=rw file1.txt   (to assign permission to group even if they are having other permissions)


chmod -R 777 test      (for changing the permission of all folders and file in test folder, R for recursive)

chmod 777 test         (will only change the permiision of test folder not the file it contains)



sudo chgrp home file1        (will change the group of file1 to home)

sudo chown john:john file3     (will change the user and group of file3 to john)
 
sudo chown -R mike:john test   (for changing user and group of all files and folder inside test folder)


getent passwd     (to get all the users present in the system, basically it opens /etc/passwd )


getent group      (to get all the groups present in the system, basically it opens /etc/groups)

==============================================================================================

top      (to display top processes, q to come out of the command)
(top command keeps on running so if you try to store it in some file it will hang)


top -b -n 2     (top keep on running so here you specify the no. of iterations ie. 2, b is for batch)

top -b -n 1 > file.txt    (to store one iteration of top in file.txt)



ps -ef | more      (for showing all the processes in the system pagewise)


ps auxwww           (more details and exact command line to run this)


=============================================================================================


> Redirect to a file or stdout

< Input from a file or stdin

<< Append to a file (not overwrite)
>> Redirect and append to a file  


1>filename           (Redirects stdout to a filename)

1>>filename          (Redirects stdout to a filename)

2>filename           (Redirects stderr to a filename)

&>filename           (Redirects both stderr and stdout to a filename)



/dev/null   is special character device where redirection to it is completely lost
This is particularly useful when we want to discard error message

echo hello > /dev/null    (echo for hello is not printed)
(if you want to kill a process but the process does not exist, then to discard the error message we can use it)


ls -l > filename.txt        (the list of files will be saved to filename.txt) 


> filename1.txt             (to create an empty file or remove all the content from an existing file)


echo hello >> filename.txt          (to append hello to the file)

echo hello123 > filename.txt        (to overwrite the content of the file with hello123)


ls -l >/dev/null               (dump data into dev/null)
ls -l /dev/null



ls -l test12345 > file123.txt        (only stdout goes to the file)
ls: cannot access test12345 : No such file or directory



ls -l test123 > file123.txt 2>&1      (2 is for stderr , stderr to stdout then output to file)
(now the error message will also go to the file)
 
echo $?       (any nonzero number is error message, it is executed after the command)


========================================================================================================
exec spawns a new shell or new process

exec 3<> filename

exec 3<> mylog.txt

echo "hello" (will display hello on screen)

echo "hello" >&3  (hello will not display on the screen but will get stored in mylog.txt)

echo "hello1" >&3 (this will append to the already existing file and not overwrite)


exec 3>&- (will turn off this behaviour which means whatever redirection is happening with file descriptor 3 will not happen)

echo "what" >&3
3: Bad file descriptor



















